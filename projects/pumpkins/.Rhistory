m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
row = as.data.frame(as.list(c(split_ott, more[1], more[2], less[1], less[2])), col.names = c("OTT", "RMSE_MORE", "R^2_MORE", "RMSE_LESS", "R^2_LESS"))
ott_split = bind_rows(ott_split, row)
}
ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS)
ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS) %>%
which.min()
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS)
which.min(ott_split$RMSE_SUM)
ott_split = data.frame()
for (x in 0:10){
split_ott = x*5 + 300
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott < split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
row = as.data.frame(as.list(c(split_ott, more[1], more[2], less[1], less[2])), col.names = c("OTT", "RMSE_MORE", "R^2_MORE", "RMSE_LESS", "R^2_LESS"))
ott_split = bind_rows(ott_split, row)
}
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS)
ott_split = ott_split %>%
mutate(R_2_PRODUCT = R.2_MORE * R.2_LESS)
mutate(ott_split, final_score = RMSE_SUM * 1/R_2_PRODUCT)
ott_split = mutate(ott_split, final_score = RMSE_SUM * 1/R_2_PRODUCT)
ott_split = data.frame()
for (x in 0:20){
split_ott = x*5 + 250
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott < split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
row = as.data.frame(as.list(c(split_ott, more[1], more[2], less[1], less[2])), col.names = c("OTT", "RMSE_MORE", "R_2_MORE", "RMSE_LESS", "R_2_LESS"))
ott_split = bind_rows(ott_split, row)
}
ott_split = data.frame()
for (x in 0:20){
split_ott = x*5 + 250
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott < split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
row = as.data.frame(as.list(c(split_ott, more[1], more[2], less[1], less[2])), col.names = c("OTT", "RMSE_MORE", "R_2_MORE", "RMSE_LESS", "R_2_LESS"))
ott_split = bind_rows(ott_split, row)
}
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS,
R_2_PRODUCT = R_2_MORE * R_2_LESS) %>%
mutate(final_score = RMSE_SUM * 1/R_2_PRODUCT)
ott_split = data.frame()
for (x in 0:20){
split_ott = x + 250
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott < split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
row = as.data.frame(as.list(c(split_ott, more[1], more[2], less[1], less[2])), col.names = c("OTT", "RMSE_MORE", "R_2_MORE", "RMSE_LESS", "R_2_LESS"))
ott_split = bind_rows(ott_split, row)
}
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS,
R_2_PRODUCT = R_2_MORE * R_2_LESS) %>%
mutate(final_score = RMSE_SUM * 1/R_2_PRODUCT)
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS,
R_2_PRODUCT = R_2_MORE * R_2_LESS) %>%
mutate(final_score = RMSE_SUM * R_2_PRODUCT)
ott_split = data.frame()
for (x in 0:20){
split_ott = x + 240
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott < split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
row = as.data.frame(as.list(c(split_ott, more[1], more[2], less[1], less[2])), col.names = c("OTT", "RMSE_MORE", "R_2_MORE", "RMSE_LESS", "R_2_LESS"))
ott_split = bind_rows(ott_split, row)
}
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS,
R_2_PRODUCT = R_2_MORE * R_2_LESS) %>%
mutate(final_score = RMSE_SUM * R_2_PRODUCT)
ott_split = data.frame()
for (x in 0:20){
split_ott = x + 250
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott < split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
row = as.data.frame(as.list(c(split_ott, more[1], more[2], less[1], less[2])), col.names = c("OTT", "RMSE_MORE", "R_2_MORE", "RMSE_LESS", "R_2_LESS"))
ott_split = bind_rows(ott_split, row)
}
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS,
R_2_PRODUCT = R_2_MORE * R_2_LESS) %>%
mutate(final_score = RMSE_SUM * (1-R_2_PRODUCT))
ott_split = data.frame()
for (x in 0:200){
split_ott = x + 250
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott < split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
row = as.data.frame(as.list(c(split_ott, more[1], more[2], less[1], less[2])), col.names = c("OTT", "RMSE_MORE", "R_2_MORE", "RMSE_LESS", "R_2_LESS"))
ott_split = bind_rows(ott_split, row)
}
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS,
R_2_PRODUCT = R_2_MORE * R_2_LESS) %>%
mutate(final_score = RMSE_SUM * (1-R_2_PRODUCT))
which.min(ott_split$RMSE_SUM)
print(more)
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS,
R_2_PRODUCT = (R_2_MORE * R_2_LESS)/2) %>%
mutate(final_score = RMSE_SUM * (1-R_2_PRODUCT))
split_ott = 256
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott < split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
row = as.data.frame(as.list(c(split_ott, more[1], more[2], less[1], less[2])), col.names = c("OTT", "RMSE_MORE", "R_2_MORE", "RMSE_LESS", "R_2_LESS"))
ott_split = bind_rows(ott_split, row)
print(more)
print(less)
ott_split = ott_split %>%
mutate(RMSE_SUM = RMSE_MORE + RMSE_LESS,
R_2_PRODUCT = (R_2_MORE * R_2_LESS)/2) %>%
mutate(final_score = RMSE_SUM * (1-R_2_PRODUCT))
write_csv(ott_split, "ott_thresholds_250_450.csv")
table = read_csv("505 OTT to lbs - Data Table.csv") %>%
mutate(ott = OTT) %>%
select(ott, lbs)
weight = predict(m4, table)
View(table)
split_ott = 256
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott <= split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
View(ott_split)
table_lower = table %>%
filter(ott <= 256)
table_upper = table %>%
filter(ott > 256)
weight_lower = predict(m_less, table_lower)
weight_upper = predict(m_more, table_upper)
weight_upper = predict(m_over, table_upper)
table_lower = table_lower %>%
mutate(lbs = weight_lower) %>%
select(ott, lbs)
View(table_lower)
View(ds_ott_more)
chart = function(ott){
weight = (((12.81/(1+6.87*2^(-ott/97)))^3+(ott/45.9)^3.014)-10)
return(weight)
}
View(test_data_less)
test_data_less = test_data_less %>%
mutate(chart_weight = chart(ott))
test_data_more = test_data_more %>%
mutate(chart_weight = chart(ott))
test_data = bind_rows(test_data_less, test_data_more) %>%
select(chart_weight, weight)
RMSE(test_data$chart_weight, test_data$weight)
View(test_data)
split_ott = 256
ds_ott_more = ds_ott %>%
filter(ott > split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
ds_ott_less = ds_ott %>%
filter(ott <= split_ott) %>%
filter(!is.na(mother_weight) & !is.na(father_weight))
set.seed(504)
train_index_more=createDataPartition(ds_ott_more$weight, times = 1, p = 0.8, list = FALSE)
train_data_more <- ds_ott_more[train_index_more, ]
test_data_more <- ds_ott_more[-train_index_more, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
m_over <- train(weight ~ ott + mother_weight + father_weight,
data = train_data_more,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_over = predict(m_over, test_data_more)
more = postResample(pred = weight_pred_over, test_data_more$weight)
train_index_less=createDataPartition(ds_ott_less$weight, times = 1, p = 0.8, list = FALSE)
train_data_less <- ds_ott_less[train_index_less, ]
test_data_less <- ds_ott_less[-train_index_less, ]
m_less <- train(weight ~ ott,
data = train_data_less,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
weight_pred_less = predict(m_less, test_data_less)
less = postResample(pred = weight_pred_less, test_data_less$weight)
test_data_less = test_data_less %>%
mutate(chart_weight = chart(ott))
test_data_more = test_data_more %>%
mutate(chart_weight = chart(ott))
test_data = bind_rows(test_data_less, test_data_more) %>%
select(chart_weight, weight)
RMSE(test_data$chart_weight, test_data$weight)
RMSE(test_data_more$chart_weight, test_data_more$weight)
RMSE(test_data_less$chart_weight, test_data_less$weight)
RMSE(test_data_more$chart_weight, test_data_more$weight)
RMSE(test_data_less$chart_weight, test_data_less$weight)
comparison = as.data.frame(c(chart_more, chart_less))
chart_more = RMSE(test_data_more$chart_weight, test_data_more$weight)
chart_less = RMSE(test_data_less$chart_weight, test_data_less$weight)
comparison = as.data.frame(c(chart_more, chart_less))
View(comparison)
comparison = as.data.frame(as.list(c(chart_more, chart_less)), col.names = "Above", "Below")
comparison = as.data.frame(as.list(c(chart_more, chart_less)), col.names = c("Above", "Below")) %>%
bind_rows(as.data.frame(as.list(c(more[1], less[1])), col.names = c("Above", "Below")))
comparison = as.data.frame(as.list(c('Chart', chart_more, chart_less)), col.names = c("Model", "Above", "Below")) %>%
bind_rows(as.data.frame(as.list(c('Boosting', more[1], less[1])), col.names = c("Model","Above", "Below")))
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
library(moderndive) # add to use get_regression_table()
library(fastDummies) # added to use dummy_col()
library(skimr) # for EDA
library(gbm) # to try gradient boosting model
library(GGally) # for ggpairs EDA
knitr::opts_chunk$set(echo = TRUE)
# split into test/training data
ds_ott_chart = ds_ott %>%
mutate(chart_weight = chart(ott))
set.seed(504)
train_index <- createDataPartition(ds_ott_chart$weight, times = 1, p = 0.8, list = FALSE)
train_data <- ds_ott_chart[train_index, ]
test_data <- ds_ott_chart[-train_index, ]
# set how to split the training data for multiple training attempts to find best model
ctrl = trainControl(method = "repeatedcv", number = 5, repeats = 3)
# train model
m2 <- train(weight ~ ott,
data = train_data,
method = "lm",
trControl = ctrl,
na.action = na.exclude
)
m3 <- train(weight ~ ott,
data = train_data,
method = "glm",
trControl = ctrl
)
m4 <- train(weight ~ ott,
data = train_data,
method = "gbm",
verbose = FALSE,
trControl = ctrl
)
# check model
m2
m3
m4
